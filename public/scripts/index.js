import { renderSearchFormBlock, search } from './search-form.js';
import { renderSearchStubBlock } from './search-results.js';
import { renderUserBlock } from './user.js';
import { renderToast } from './lib.js';
// объявляем глобальные переменные
let user = { username: undefined, avatarUrl: undefined };
let favoritesAmount = undefined;
const today = new Date();
// загружаем данные о пользователе в contentStorage, если их там нет
if (!localStorage.getItem('user')) {
    localStorage.setItem('user', '{ username: "Wade Warren", avatarUrl: "/img/avatar.png" }');
}
if (!localStorage.getItem('favoritesAmount')) {
    localStorage.setItem('favoritesAmount', '1');
}
// функции выгрузки данных оп пользователе
function getUserData() { user = JSON.parse(localStorage.getItem('user')); }
function getFavoritesAmount() { favoritesAmount = Number(localStorage.getItem('favoritesAmount')); }
// расчитываем значения по умолчанию для формы поиска
const checkInDefaultValue = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 2);
const checkOutDefaultValue = new Date(checkInDefaultValue.getFullYear(), checkInDefaultValue.getMonth(), checkInDefaultValue.getDate() + 2);
// рендер страницы
window.addEventListener('DOMContentLoaded', () => {
    getUserData();
    getFavoritesAmount();
    renderUserBlock(user.username, user.avatarUrl, favoritesAmount);
    renderSearchFormBlock(checkInDefaultValue, checkOutDefaultValue);
    renderSearchStubBlock();
    renderToast({ text: 'Это пример уведомления. Используйте его при необходимости', type: 'success' }, { name: 'Понял', handler: () => { console.log('Уведомление закрыто'); } });
    document.getElementById('search-form').addEventListener('submit', (event) => { search(); event.preventDefault(); });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2hFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFCQUFxQixDQUFBO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUV0QyxrQ0FBa0M7QUFDbEMsSUFBSSxJQUFJLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsQ0FBQTtBQUN2RCxJQUFJLGVBQWUsR0FBRyxTQUFTLENBQUE7QUFDL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQTtBQUV4QixvRUFBb0U7QUFDcEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7SUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSwyREFBMkQsQ0FBQyxDQUFBO0NBQUU7QUFDaEksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRTtJQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLENBQUE7Q0FBRTtBQUU5RiwwQ0FBMEM7QUFDMUMsU0FBUyxXQUFXLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUMxRSxTQUFTLGtCQUFrQixLQUFLLGVBQWUsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRW5HLHFEQUFxRDtBQUNyRCxNQUFNLG1CQUFtQixHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzlGLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLEVBQUUsbUJBQW1CLENBQUMsUUFBUSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUE7QUFFekksa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDL0MsV0FBVyxFQUFFLENBQUE7SUFDYixrQkFBa0IsRUFBRSxDQUFBO0lBQ3BCLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUE7SUFDL0QscUJBQXFCLENBQUMsbUJBQW1CLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtJQUNoRSxxQkFBcUIsRUFBRSxDQUFBO0lBQ3ZCLFdBQVcsQ0FDVCxFQUFDLElBQUksRUFBRSwyREFBMkQsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDLEVBQ3BGLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBLENBQUEsQ0FBQyxFQUFDLENBQ3JFLENBQUE7SUFDRCxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNwSCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlclNlYXJjaEZvcm1CbG9jaywgc2VhcmNoIH0gZnJvbSAnLi9zZWFyY2gtZm9ybS5qcydcbmltcG9ydCB7IHJlbmRlclNlYXJjaFN0dWJCbG9jayB9IGZyb20gJy4vc2VhcmNoLXJlc3VsdHMuanMnXG5pbXBvcnQgeyByZW5kZXJVc2VyQmxvY2sgfSBmcm9tICcuL3VzZXIuanMnXG5pbXBvcnQgeyByZW5kZXJUb2FzdCB9IGZyb20gJy4vbGliLmpzJ1xuXG4vLyDQvtCx0YrRj9Cy0LvRj9C10Lwg0LPQu9C+0LHQsNC70YzQvdGL0LUg0L/QtdGA0LXQvNC10L3QvdGL0LVcbmxldCB1c2VyID0geyB1c2VybmFtZTogdW5kZWZpbmVkLCBhdmF0YXJVcmw6IHVuZGVmaW5lZH1cbmxldCBmYXZvcml0ZXNBbW91bnQgPSB1bmRlZmluZWRcbmNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKVxuXG4vLyDQt9Cw0LPRgNGD0LbQsNC10Lwg0LTQsNC90L3Ri9C1INC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtSDQsiBjb250ZW50U3RvcmFnZSwg0LXRgdC70Lgg0LjRhSDRgtCw0Lwg0L3QtdGCXG5pZiAoIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJykpIHsgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCAneyB1c2VybmFtZTogXCJXYWRlIFdhcnJlblwiLCBhdmF0YXJVcmw6IFwiL2ltZy9hdmF0YXIucG5nXCIgfScpIH1cbmlmICghbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Zhdm9yaXRlc0Ftb3VudCcpKSB7IGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmYXZvcml0ZXNBbW91bnQnLCAnMScpIH1cblxuLy8g0YTRg9C90LrRhtC40Lgg0LLRi9Cz0YDRg9C30LrQuCDQtNCw0L3QvdGL0YUg0L7QvyDQv9C+0LvRjNC30L7QstCw0YLQtdC70LVcbmZ1bmN0aW9uIGdldFVzZXJEYXRhKCkgeyB1c2VyID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpKSB9XG5mdW5jdGlvbiBnZXRGYXZvcml0ZXNBbW91bnQoKSB7IGZhdm9yaXRlc0Ftb3VudCA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2b3JpdGVzQW1vdW50JykpIH1cblxuLy8g0YDQsNGB0YfQuNGC0YvQstCw0LXQvCDQt9C90LDRh9C10L3QuNGPINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOINC00LvRjyDRhNC+0YDQvNGLINC/0L7QuNGB0LrQsFxuY29uc3QgY2hlY2tJbkRlZmF1bHRWYWx1ZSA9IG5ldyBEYXRlKHRvZGF5LmdldEZ1bGxZZWFyKCksIHRvZGF5LmdldE1vbnRoKCksIHRvZGF5LmdldERhdGUoKSsyKVxuY29uc3QgY2hlY2tPdXREZWZhdWx0VmFsdWUgPSBuZXcgRGF0ZShjaGVja0luRGVmYXVsdFZhbHVlLmdldEZ1bGxZZWFyKCksIGNoZWNrSW5EZWZhdWx0VmFsdWUuZ2V0TW9udGgoKSwgY2hlY2tJbkRlZmF1bHRWYWx1ZS5nZXREYXRlKCkrMilcblxuLy8g0YDQtdC90LTQtdGAINGB0YLRgNCw0L3QuNGG0YtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBnZXRVc2VyRGF0YSgpXG4gIGdldEZhdm9yaXRlc0Ftb3VudCgpXG4gIHJlbmRlclVzZXJCbG9jayh1c2VyLnVzZXJuYW1lLCB1c2VyLmF2YXRhclVybCwgZmF2b3JpdGVzQW1vdW50KVxuICByZW5kZXJTZWFyY2hGb3JtQmxvY2soY2hlY2tJbkRlZmF1bHRWYWx1ZSwgY2hlY2tPdXREZWZhdWx0VmFsdWUpXG4gIHJlbmRlclNlYXJjaFN0dWJCbG9jaygpXG4gIHJlbmRlclRvYXN0KFxuICAgIHt0ZXh0OiAn0K3RgtC+INC/0YDQuNC80LXRgCDRg9Cy0LXQtNC+0LzQu9C10L3QuNGPLiDQmNGB0L/QvtC70YzQt9GD0LnRgtC1INC10LPQviDQv9GA0Lgg0L3QtdC+0LHRhdC+0LTQuNC80L7RgdGC0LgnLCB0eXBlOiAnc3VjY2Vzcyd9LFxuICAgIHtuYW1lOiAn0J/QvtC90Y/QuycsIGhhbmRsZXI6ICgpID0+IHtjb25zb2xlLmxvZygn0KPQstC10LTQvtC80LvQtdC90LjQtSDQt9Cw0LrRgNGL0YLQvicpfX1cbiAgKVxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLWZvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHsgc2VhcmNoKCk7IGV2ZW50LnByZXZlbnREZWZhdWx0KCkgfSlcbn0pIl19